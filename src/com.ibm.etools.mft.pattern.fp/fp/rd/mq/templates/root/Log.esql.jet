<c:if test="boolean($root/brokerSchema)" >
<%-- Tag exists --%>
<c:if test="string-length($root/brokerSchema) > 0">
<%-- and has a value--%>
BROKER SCHEMA <c:get select="$root/brokerSchema"/>
</c:if>
</c:if>
--  Generated by <c:get select="$root/@patternName"/> Version <c:get select="$root/@patternVersion"/>
--  $MQSI patternName=<c:get select="$root/@patternName"/> MQSI$
--  $MQSI patternVersion=<c:get select="$root/@patternVersion"/> MQSI$I$
CREATE Compute MODULE CreateLogMessage

CREATE FUNCTION main() RETURNS BOOLEAN
			BEGIN
			SET OutputRoot.Properties = NULL;
-- Create Headers
			CREATE FIRSTCHILD OF OutputRoot DOMAIN ('MQMD') NAME 'MQMD';
			DECLARE MQMDRef REFERENCE TO OutputRoot.MQMD;
			SET MQMDRef.Version = MQMD_CURRENT_VERSION;
			SET MQMDRef.CodedCharSetId = InputRoot.Properties.CodedCharSetId;
			SET MQMDRef.Encoding = InputRoot.Properties.Encoding;
			SET MQMDRef.Format = MQFMT_RF_HEADER_2;
			DECLARE OutRef REFERENCE TO OutputRoot;
			CREATE NEXTSIBLING OF MQMDRef AS OutRef DOMAIN('MQRFH2') NAME 'MQRFH2';
			SET OutputRoot.MQRFH2.(MQRFH2.Field)Version = 2;
-- Define basic logging data
			SET OutRef.CodedCharSetId = InputRoot.Properties.CodedCharSetId;
			SET OutRef.Encoding = InputRoot.Properties.Encoding;
			SET OutRef.usr.BrokerName = SQL.BrokerName;
			SET OutRef.usr.MessageFlowLabel = SQL.MessageFlowLabel;
			SET OutRef.usr.DTSTAMP = CURRENT_TIMESTAMP;
			CREATE NEXTSIBLING OF OutRef AS OutRef DOMAIN('XMLNSC') NAME 'XMLNSC';			
-- Add file and record information
-- Do not log file contents as these are available in the archive directory
<c:choose>
<c:when test = "$root/routing = 'noRouting'">
			-- Log data on file and records in XMLNSC body
			SET OutputRoot.XMLNSC.Log.Directory = InputLocalEnvironment.File.Directory;
			SET OutputRoot.XMLNSC.Log.FileName = InputLocalEnvironment.File.Name;
			SET OutputRoot.XMLNSC.Log.RecordTotal = InputLocalEnvironment.File.Record;
</c:when>
<c:otherwise> 


-- Set default routing from shared variable Defaults and clear entry for this file 
	
	DECLARE I Integer 0;
	DECLARE J Integer 1;
	DECLARE FileKey CHARACTER;
			SET FileKey = InputLocalEnvironment.File.Directory||
										InputLocalEnvironment.File.Name||
										InputLocalEnvironment.File.TimeStamp;
			ACCUMULATE: BEGIN ATOMIC
				-- search for a match
				SET I = 1;
					SEARCH: LOOP
					IF I > Files THEN
						-- No match 
						SET Environment.PatternVariables.DefaultRouting = 0; 
						LEAVE SEARCH; 
					END IF;
					IF Defaults.Files[I].Key = FileKey
						THEN SET Environment.PatternVariables.DefaultRouting = Defaults.Files[I].Total;
						-- NOw remove the total for this file
						IF I < Files
							THEN
							SET FileKey = 	Defaults.Files[Files].Key;		
							SET Defaults.Files[I].Key = FileKey ;
							SET J = Defaults.Files[Files].Total;
							SET Defaults.Files[I].Total = J;
						END IF;	
							SET Files = Files - 1;
							
						LEAVE SEARCH;
					END IF;
					SET I = I + 1;
					END LOOP SEARCH;
		END ACCUMULATE;
			-- Log data on file and records in XMLNSC body
			SET OutputRoot.XMLNSC.Log.Directory = InputLocalEnvironment.File.Directory;
			SET OutputRoot.XMLNSC.Log.FileName = InputLocalEnvironment.File.Name;
			SET OutputRoot.XMLNSC.Log.RecordTotal = InputLocalEnvironment.File.Record;
			SET OutputRoot.XMLNSC.Log.RecordsToDefault = Environment.PatternVariables.DefaultRouting;
</c:otherwise>
</c:choose>

END;
END MODULE;

CREATE Compute MODULE CreateTraceData
CREATE FUNCTION main() RETURNS BOOLEAN BEGIN
	DECLARE EnvVarRef REFERENCE TO Environment.PatternVariables;
	SET EnvVarRef.DTSTAMP = CURRENT_TIMESTAMP; 
	SET EnvVarRef.BrokerName = SQL.BrokerName ;
    SET EnvVarRef.MessageFlowlabel = SQL.MessageFlowLabel;
-- Add file and record information
	SET EnvVarRef.File.Directory = InputLocalEnvironment.File.Directory;
	SET EnvVarRef.File.FileName = InputLocalEnvironment.File.Name;
	SET EnvVarRef.File.RecordTotal = InputLocalEnvironment.File.Record;
	SET EnvVarRef.File.RecordsToDefault = Environment.PatternVariables.DefaultRouting;


RETURN TRUE;
END;
END MODULE;

CREATE FILTER MODULE CheckLogging
CREATE FUNCTION main() RETURNS BOOLEAN BEGIN
	
	RETURN Environment.PatternVariables.LoggingOn;
	END;

END MODULE;