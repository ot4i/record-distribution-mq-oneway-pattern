<c:if test="boolean($root/brokerSchema)" >
<%-- Tag exists --%>
<c:if test="string-length($root/brokerSchema) > 0">
<%-- and has a value--%>
BROKER SCHEMA <c:get select="$root/brokerSchema"/>
</c:if>
</c:if>
--  Generated by <c:get select="$root/@patternName"/> Version <c:get select="$root/@patternVersion"/>
--  $MQSI patternName=<c:get select="$root/@patternName"/> MQSI$
--  $MQSI patternVersion=<c:get select="$root/@patternVersion"/> MQSI$
CREATE COMPUTE MODULE RoutetoDest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		/****************************************************************************
		*   Extract destination data based on message   
		*	This version assumes MQ destination
		*   Any compute node using this ESQL most have the following set:
		*
		*   - The database source set to the database containing the routing table
		*   - The compute mode set to environment.
		*****************************************************************************/
DECLARE CONTEXT CHARACTER '<c:get select="$root/routingContext"/>';
-- Copy LocalEnvironment so content not lost
		SET OutputLocalEnvironment = InputLocalEnvironment;


-- Read the database table into memory when CacheQueues.valid field is set to null.
-- Do this atomically to protect against problems when threads > 1

		ROUTING : BEGIN ATOMIC
			IF CacheQueueTable.valid IS NULL THEN
		SET  CacheQueueTable.DestinationData[] =  
		       	(
		       		SELECT S.QUEUE_MANAGER, S.QUEUE_NAME ,S.VARIABLE1, S.VARIABLE2
		       		FROM Database.ROUTING_TABLE as S 
		       		WHERE 
		       			S.ROUTING_CONTEXT = CONTEXT     			
		       	 ); 
		         	 
			SET CacheQueueTable.valid = true;
			END IF;
		END ROUTING;		

-- 	At this point the CacheQueues should be full of the data with possible destinations
-- Extract the key from the incoming message

		DECLARE KEY1 CHARACTER;
		DECLARE KEY2 CHARACTER;

/******************************************
* This is a pattern parameter substitution*
*******************************************/
		SET KEY1 = <c:get select = "$root/key1" />;
		SET KEY2 = <c:get select = "$root/key2" />;
		IF KEY1 = NULL OR KEY2 = NULL THEN
		 	SET Environment.PatternVariables.RoutingError = 'No key found in message';
			SET Environment.PatternVariables.ErrorState = 'Failed';
	IF 	Environment.PatternVariables.DefaultRouting IS NULL
		THEN
		SET Environment.PatternVariables.DefaultRouting = 0;
	END IF;
	SET Environment.PatternVariables.DefaultRouting = Environment.PatternVariables.DefaultRouting +1;
			PROPAGATE TO TERMINAL 'Failure';
			RETURN FALSE;
		END IF;
		
		
-- Select queue manager and queue based on key from message		
		SET  OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[] = 
		      (
		       SELECT S.QUEUE_MANAGER as queueManagerName, S.QUEUE_NAME as queueName 
		       FROM CacheQueueTable.DestinationData[] as S 
		       WHERE 
		        S.VARIABLE1 = KEY1 and
		        S.VARIABLE2 = KEY2 		        			
		        );
-- Was a route selected		        
IF EXISTS(OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[])
-- YES - Propagate to out
	THEN RETURN TRUE;
-- NO - Propagate to failure and set environment
ELSE 
	SET Environment.PatternVariables.RoutingError = 'Key not found in database';
	SET Environment.PatternVariables.ErrorState = 'Failed';

	IF 	Environment.PatternVariables.DefaultRouting IS NULL
		THEN
		SET Environment.PatternVariables.DefaultRouting = 0;
	END IF;
	SET Environment.PatternVariables.DefaultRouting = Environment.PatternVariables.DefaultRouting +1;
	PROPAGATE TO TERMINAL 'Failure';
	RETURN FALSE;
END IF;
	END;
	END MODULE;
