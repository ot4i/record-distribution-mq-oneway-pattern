<c:if test="boolean($root/brokerSchema)" >
<%-- Tag exists --%>
<c:if test="string-length($root/brokerSchema) > 0">
<%-- and has a value--%>
BROKER SCHEMA <c:get select="$root/brokerSchema"/>
</c:if>
</c:if>
--  Generated by <c:get select="$root/@patternName"/> Version <c:get select="$root/@patternVersion"/>
--  $MQSI patternName=<c:get select="$root/@patternName"/> MQSI$
--  $MQSI patternVersion=<c:get select="$root/@patternVersion"/> MQSI$
CREATE COMPUTE MODULE RoutetoDest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		/****************************************************************************
		*   Extract destination data based on message   
		*	This version assumes MQ destination
		*   Any compute node using this ESQL most have the following set:
		*
		*   - The database source set to the database containing the routing table
		*   - The compute mode set to environment.
		*****************************************************************************/
DECLARE CONTEXT CHARACTER '<c:get select="$root/routingContext"/>';
-- Copy LocalEnvironment so content not lost
		SET OutputLocalEnvironment = InputLocalEnvironment;


-- Read the database table into memory when CacheQueues.valid field is set to null.
-- Do this atomically to protect against problems when threads > 1

		ROUTING : BEGIN ATOMIC
			IF CacheQueueTable.valid IS NULL THEN
		SET  CacheQueueTable.DestinationData[] =  
		       	(
		       		SELECT S.QUEUE_MANAGER, S.QUEUE_NAME ,S.VARIABLE1, S.VARIABLE2
		       		FROM Database.ROUTING_TABLE as S 
		       		WHERE 
		       			S.ROUTING_CONTEXT = CONTEXT     			
		       	 ); 
		         	 
			SET CacheQueueTable.valid = true;
			END IF;
		END ROUTING;		

-- 	At this point the CacheQueues should be full of the data with possible destinations
-- Extract the key from the incoming message

		DECLARE KEY1 CHARACTER;
/******************************************
* This is a pattern parameter substitution*
*******************************************/
		SET KEY1 = <c:get select = "$root/key1" />;
		IF KEY1 IS NOT NULL
		THEN 
			-- Select queue manager and queue based on key from message		
			SET  OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[] = 
		      (
		       SELECT S.QUEUE_MANAGER as queueManagerName, S.QUEUE_NAME as queueName 
		       FROM CacheQueueTable.DestinationData[] as S 
		       WHERE 
		        S.VARIABLE1 = KEY1		        			
		        );
			-- Was a route selected		        
			IF EXISTS(OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[])
			-- YES - Propagate to out
			THEN RETURN TRUE;
			END IF;        
		END IF;
-- No routing so send to default 
-- Update default count and propagate to Out1 for default queue
/*******************************************************
* Increment default count for this file for log message
********************************************************/

	DECLARE I Integer 0;
	DECLARE J Integer 1;
	DECLARE ThisFileKey CHARACTER;
			SET ThisFileKey = InputLocalEnvironment.File.Directory||
										InputLocalEnvironment.File.Name||
										InputLocalEnvironment.File.TimeStamp;
			ACCUMULATE: BEGIN ATOMIC
				SET J = 0;
				-- search for a match
				SET I = 1;
					SEARCH: LOOP
					IF I > Files THEN
						-- No match 
						SET J = Files + 1;
						SET Defaults.Files[J].Key = ThisFileKey;
						SET Defaults.Files[J].Total = 1;
						SET Files = J;
						LEAVE SEARCH; 
					END IF;
					IF Defaults.Files[I].Key = ThisFileKey
						THEN SET Defaults.Files[I].Total = Defaults.Files[I].Total + 1;
						LEAVE SEARCH;
					END IF;
					SET I = I + 1;
					END LOOP SEARCH;
		END ACCUMULATE;

	PROPAGATE TO TERMINAL 'Failure';
	RETURN FALSE;
	END;
	END MODULE;
