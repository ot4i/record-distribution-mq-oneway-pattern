<%
com.ibm.etools.mft.pattern.fp.plugin.PatternPlugin pattern = com.ibm.etools.mft.pattern.fp.plugin.PatternPlugin.getInstance();
com.ibm.etools.mft.pattern.fp.rd.mq.PatternMessages messages = new com.ibm.etools.mft.pattern.fp.rd.mq.PatternMessages();
%>
<c:if test="boolean($root/brokerSchema)" >
<%-- Tag exists --%>
<c:if test="string-length($root/brokerSchema) > 0">
<%-- and has a value--%>
BROKER SCHEMA <c:get select="$root/brokerSchema"/>
</c:if>
</c:if>
--  Generated by <c:get select="$root/@patternName"/> Version <c:get select="$root/@patternVersion"/>
--  $MQSI patternName=<c:get select="$root/@patternName"/> MQSI$
--  $MQSI patternVersion=<c:get select="$root/@patternVersion"/> MQSI$

CREATE FILTER MODULE CheckErrorLogging
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	RETURN Environment.PatternVariables.ErrorLoggingOn;
	END;
	END MODULE;
	
		
CREATE COMPUTE MODULE Build_Error_Message
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = NULL;
		-- Create MQMD
		DECLARE MQMDRef REFERENCE TO OutputRoot.MQMD;
		CREATE FIRSTCHILD OF OutputRoot AS MQMDRef DOMAIN ('MQMD') NAME 'MQMD';
		SET MQMDRef.Version = MQMD_CURRENT_VERSION;
		SET MQMDRef.ApplIdentityData = SQL.BrokerName;
		SET MQMDRef.CodedCharSetId = InputRoot.Properties.CodedCharSetId;
		SET MQMDRef.Encoding = InputRoot.Properties.Encoding;
		
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;		
		CREATE NEXTSIBLING OF MQMDRef AS OutRef DOMAIN('XMLNSC') NAME 'XMLNSC';  
-- Define the standard error fields
		SET OutRef.Error.BrokerName = SQL.BrokerName;
		MOVE OutRef TO OutputRoot.XMLNSC.Error;

	    SET OutRef.MessageFlowLabel = SQL.MessageFlowLabel; 
	    SET OutRef.DTSTAMP =   CURRENT_TIMESTAMP; 
<c:choose>
<c:when test = "$root/routing = 'noRouting'">
-- and some file info
		SET OutRef.File.Directory = InputLocalEnvironment.File.Directory;
		SET OutRef.File.FileName = InputLocalEnvironment.File.Name;
		SET OutRef.File.RecordNumber = InputLocalEnvironment.File.Record;
		DECLARE I Integer 0;
</c:when>
<c:otherwise> 
-- Set default routing from shared variable Defaults and clear entry for this file 
	
	DECLARE I Integer 0;
	DECLARE J Integer 1;
	DECLARE FileKey CHARACTER;
			SET FileKey = InputLocalEnvironment.File.Directory||
										InputLocalEnvironment.File.Name||
										InputLocalEnvironment.File.TimeStamp;
			ACCUMULATE: BEGIN ATOMIC
				-- search for a match
				SET I = 1;
					SEARCH: LOOP
					IF I > Files THEN
						-- No match 
						SET Environment.PatternVariables.DefaultRouting = 0; 
						LEAVE SEARCH; 
					END IF;
					IF Defaults.Files[I].Key = FileKey
						THEN SET Environment.PatternVariables.DefaultRouting = Defaults.Files[I].Total;
						-- NOw remove the total for this file
						IF I < Files
							THEN
							SET FileKey = 	Defaults.Files[Files].Key;		
							SET Defaults.Files[I].Key = FileKey ;
							SET J = Defaults.Files[Files].Total;
							SET Defaults.Files[I].Total = J;
						END IF;	
							SET Files = Files - 1;
							
						LEAVE SEARCH;
					END IF;
					SET I = I + 1;
					END LOOP SEARCH;
		END ACCUMULATE;
-- and some file info
			SET OutRef.File.Directory = InputLocalEnvironment.File.Directory;
			SET OutRef.File.FileName = InputLocalEnvironment.File.Name;
			SET OutRef.File.RecordNumber = InputLocalEnvironment.File.Record;
			SET OutRef.File.RecordsToDefault = Environment.PatternVariables.DefaultRouting;
</c:otherwise>
</c:choose>
-- Add  exception data
		Call AddExceptionData();
		END;
		
CREATE PROCEDURE AddExceptionData() BEGIN
	
		DECLARE ERef REFERENCE TO OutputRoot.XMLNSC.Error; 
	    -- Add some exception data for error and fault
		DECLARE Error INTEGER;
		DECLARE Text CHARACTER;
		DECLARE Label CHARACTER;
		Declare FaultText CHARACTER '<%= pattern.getString("com.ibm.etools.mft.pattern.fp.rd.mq.esql.1") %>';
		DECLARE I INTEGER 1;
		DECLARE K INTEGER;
		DECLARE start REFERENCE TO InputExceptionList.*[1];

		WHILE start.Number IS NOT NULL DO 
			SET Label = start.Label;
			SET Error = start.Number;
			IF Error = 3001 THEN
				SET Text = start.Insert.Text;
			ELSE
				SET Text = start.Text;
			END IF;
			-- Don't include the "Caught exception and rethrowing message"
			IF Error <> 2230 THEN
				-- Process inserts
				DECLARE Inserts Character;
				DECLARE INS Integer;
				SET Inserts = '';
				-- Are there any inserts for this exception
				IF EXISTS (start.Insert[]) THEN
					-- If YES add them to inserts string
				 	SET Inserts = Inserts || COALESCE(start.Insert[1].Text,'NULL')|| ' / ';
				 	SET K = 1;
				 	INSERTS: LOOP
						IF CARDINALITY(start.Insert[])> K 
						THEN 
							SET Inserts = Inserts || COALESCE(start.Insert[K+1].Text,'NULL')|| ' / ';
						-- No more inserts to process
						ELSE LEAVE INSERTS;
						END IF;
					SET K = K+1;
					END LOOP INSERTS;
				END IF;
				SET ERef.Exception[I].Label = Label;
				SET ERef.Exception[I].Error = Error;
				SET ERef.Exception[I].Text = Text;
				Set ERef.Exception[I].Inserts = COALESCE(Inserts, '');
				
				SET FaultText = FaultText || ' <%= pattern.getString("com.ibm.etools.mft.pattern.fp.rd.mq.esql.2") %> ' || COALESCE(Label, ''); 
				SET FaultText = FaultText || ' <%= pattern.getString("com.ibm.etools.mft.pattern.fp.rd.mq.esql.3") %> ' || COALESCE(CAST(Error AS CHARACTER), '');
				SET FaultText = FaultText || ' <%= pattern.getString("com.ibm.etools.mft.pattern.fp.rd.mq.esql.4") %> ' || COALESCE(Text, '');
				SET FaultText = FaultText || ' <%= pattern.getString("com.ibm.etools.mft.pattern.fp.rd.mq.esql.6") %> ' || COALESCE(Inserts, '');

				SET I = I+1; 
			END IF;
			-- Move start to the last child of the field to which it currently points
			MOVE start LASTCHILD;
		END WHILE;
		SET Environment.PatternVariables.FaultText = FaultText;
	END;
END MODULE;
	CREATE COMPUTE MODULE Throw
		CREATE FUNCTION Main() RETURNS BOOLEAN
		BEGIN 
			THROW USER EXCEPTION SEVERITY 3 MESSAGE 2372 VALUES(Environment.PatternVariables.FaultText);
			RETURN FALSE;
		END;
	END MODULE;