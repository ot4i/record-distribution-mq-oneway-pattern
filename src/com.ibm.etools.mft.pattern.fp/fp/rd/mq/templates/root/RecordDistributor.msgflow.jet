<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI"  
    xmlns:ComIbmDatabase.msgnode="ComIbmDatabase.msgnode"
    xmlns:ComIbmCompute.msgnode="ComIbmCompute.msgnode"
    xmlns:ComIbmFileInput.msgnode="ComIbmFileInput.msgnode" 
    xmlns:ComIbmMQInput.msgnode="ComIbmMQInput.msgnode" 
    xmlns:ComIbmMQOutput.msgnode="ComIbmMQOutput.msgnode" 
    xmlns:<c:get select="$root/@brokerSchema1"/><c:get select = "$root/@error"/>.subflow =
    "<c:get select="$root/@brokerSchema2"/><c:get select = "$root/@error"/>.subflow" 
<c:if test="$root/loggingRequired = 'true'"> 
    xmlns:<c:get select="$root/@brokerSchema1"/><c:get select = "$root/@log"/>.subflow =
    "<c:get select="$root/@brokerSchema2"/><c:get select = "$root/@log"/>.subflow" 
</c:if>
    xmlns:<c:get select="$root/@brokerSchema1"/><c:get select = "$root/@recordProcessor"/>.subflow=
    "<c:get select="$root/@brokerSchema2"/><c:get select = "$root/@recordProcessor"/>.subflow" 
    xmlns:<c:get select="$root/@brokerSchema1"/><c:get select = "$root/@route"/>.subflow=
    "<c:get select="$root/@brokerSchema2"/><c:get select = "$root/@route"/>.subflow" 
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" 
    xmlns:eflow="http://www.ibm.com/wbi/2005/eflow" 
    xmlns:utility="http://www.ibm.com/wbi/2005/eflow_utility" 
    nsURI="<c:get select="$root/@thisFlowURI"/>.msgflow"
    nsPrefix="<c:get select="$root/@thisFlowPrefix"/>.msgflow">
  <eClassifiers xmi:type="eflow:FCMComposite" name="FCMComposite_1">
    <eSuperTypes href="http://www.ibm.com/wbi/2005/eflow#//FCMBlock"/>
    <c:if test="$root/errorMessageRequired= 'true'" > 
	<eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="Property.ErrorLoggingOn" 
	name="ErrorLoggingOn" lowerBound="1" defaultValueLiteral="true">
      <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    </eStructuralFeatures>
</c:if>
<c:if test="$root/loggingRequired = 'true'">    
	<eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="Property.LoggingOn" 
	name="LoggingOn" lowerBound="1" defaultValueLiteral="true">
      <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    </eStructuralFeatures>
</c:if>    
    
    <translation xmi:type="utility:TranslatableString" 
    key="<c:get select="$root/@thisFlow"/>" 
    bundleName="<c:get select="$root/@thisFlowBundleName"/>" 
    pluginId="<c:get select="$root/@projectname"/>"/>
        <colorGraphic16 xmi:type="utility:GIFFileGraphic" 
    resourceName="platform:/plugin/<c:get select="$root/@projectname"/>/icons/full/obj30/<c:get select="$root/@recordDistributor"/>.gif"/>
    <colorGraphic32 xmi:type="utility:GIFFileGraphic" 
    resourceName="platform:/plugin/<c:get select="$root/@projectname"/>/icons/full/obj30/<c:get select="$root/@recordDistributor"/>.gif"/>
	<shortDescription xmi:type="utility:ConstantString" string="<c:get select="$root/shortDescription"/>"/>
	<longDescription xmi:type="utility:ConstantString" 
    string="Generated by <c:get select="$root/@patternName"/> Version <c:get select="$root/@patternVersion"/>
    &#xD;&#xA;<c:get select="$root/longDescription"/>
    &#xD;&#xA;$MQSI patternName=<c:get select="$root/@patternName"/> MQSI$
    &#xD;&#xA;$MQSI patternVersion=<c:get select="$root/@patternVersion"/> MQSI$
    "/>
    <version xmi:type="utility:ConstantString" string="1"/>
    <composition>
      <nodes xmi:type="<c:get select="$root/@brokerSchema1"/><c:get select = "$root/@recordProcessor"/>.subflow:FCMComposite_1" xmi:id="FCMComposite_1_4" location="198,46">
        <translation xmi:type="utility:ConstantString" string="Record Processor"/>
      </nodes>
      
<c:if test="$root/errorMessageRequired = 'true'"> 
      <nodes xmi:type="ComIbmDatabase.msgnode:FCMComposite_1" xmi:id="FCMComposite_1_5" location="233,231" 
      statement="esql://routine/<c:get select="$root/@esqlQualifier"/>SaveUDPs.Main">
        <translation xmi:type="utility:ConstantString" string="Save UDPs"/>
      </nodes>
</c:if>      
      <nodes xmi:type="<c:get select="$root/@brokerSchema1"/><c:get select = "$root/@error"/>.subflow:FCMComposite_1" xmi:id="FCMComposite_1_8" location="365,231">
        <translation xmi:type="utility:ConstantString" string=" Error"/>
      </nodes>

      <nodes xmi:type="<c:get select="$root/@brokerSchema1"/><c:get select = "$root/@route"/>.subflow:FCMComposite_1" xmi:id="FCMComposite_1_100" location="385,46">
        <translation xmi:type="utility:ConstantString" string="Routing"/>
      </nodes>

<c:choose>
<%-- specify routes --%>
<c:when test="$root/routing = 'specifyRoutes'">      
<%-- Add the default output node --%>
      <nodes xmi:type="ComIbmMQOutput.msgnode:FCMComposite_1" xmi:id="FCMComposite_1_15" location="664,47" 
      queueManagerName="<c:get select ="$root/defaultQueueManager"/>" 
      queueName="<c:get select = "$root/queuePrefix"/><c:get select ="$root/defaultQueue"/><c:get select = "$root/queueSuffix"/>" >
        <translation xmi:type="utility:ConstantString" string="Default Destination"/>
      </nodes>

<%-- Add the variable number of output for subflow routeRoute --%>
      
<c:setVariable var="outputCount" select = "0"/>
<c:setVariable var="yCoord" select = "108"/>
<c:iterate select ="$root/routeTable/row" var = "curOutput">
<c:setVariable var="outputCount" select = "$outputCount+1"/> 
<c:setVariable var="yCoord" select = "$yCoord+50"/>  


<nodes xmi:type="ComIbmMQOutput.msgnode:FCMComposite_1" xmi:id="FCMComposite_1_10<c:get select="$outputCount"/>" 
location="670,<c:get select="$yCoord"/>" 
queueManagerName="<c:get select ="$curOutput/queueManager"/>" 
queueName="<c:get select = "$root/queuePrefix"/><c:get select = "$curOutput/queue"/><c:get select = "$root/queueSuffix"/>"
transactionMode="yes" persistenceMode="yes">
<translation xmi:type="utility:ConstantString" 
string="Output<c:get select="$outputCount"/>"/>
</nodes> 


</c:iterate>


</c:when>
<%-- lookup routes --%>

<c:when test="$root/routing = 'lookupRoutes'">
      <nodes xmi:type="ComIbmMQOutput.msgnode:FCMComposite_1" xmi:id="FCMComposite_1_15" location="664,47" 
      queueManagerName="<c:get select ="$root/defaultQueueManagerLookupRoutes"/>" 
      queueName="<c:get select = "$root/queuePrefix"/><c:get select ="$root/defaultQueueLookupRoutes"/><c:get select = "$root/queueSuffix"/>" >
        <translation xmi:type="utility:ConstantString" string="Default Destination"/>
      </nodes>
<nodes xmi:type="ComIbmMQOutput.msgnode:FCMComposite_1" xmi:id="FCMComposite_1_101" 
location="680,208" 
queueManagerName="" 
queueName="" 
destinationMode="list"
transactionMode="yes" persistenceMode="yes">
        <translation xmi:type="utility:ConstantString" 
        string="Output Message"/>
</nodes> 
<c:if test="$root/cacheRefresh = 'true'">
      <nodes xmi:type="ComIbmCompute.msgnode:FCMComposite_1" xmi:id="FCMComposite_1_53" 
      location="329,356" computeExpression="esql://routine/<c:get select="$root/@esqlQualifier"/>Invalidatecache.Main">
        <translation xmi:type="utility:ConstantString" string="Invalidate Cache"/>
</nodes>

<nodes xmi:type="ComIbmMQInput.msgnode:FCMComposite_1" xmi:id="FCMComposite_1_54" location="30,357" 
queueName="<c:get select = "$root/queuePrefix"/><c:get select = "$root/refreshQueue"/><c:get select = "$root/queueSuffix"/>">
        <translation xmi:type="utility:ConstantString" string="Trigger Cache Refresh"/>
</nodes>
</c:if>
</c:when>
<c:when test="$root/routing = 'noRouting'" >


	<nodes xmi:type="ComIbmMQOutput.msgnode:FCMComposite_1" xmi:id="FCMComposite_1_101" 
	location="728,210" 
	queueManagerName="<c:get select ="$root/outputQueueManager"/>" 
	queueName="<c:get select = "$root/queuePrefix"/><c:get select = "$root/outputQueue"/><c:get select = "$root/queueSuffix"/>"
	transactionMode="yes" persistenceMode="yes">
        <translation xmi:type="utility:ConstantString" 
        string="Output Message"/>
    </nodes>
</c:when>
</c:choose>

      <nodes xmi:type="ComIbmFileInput.msgnode:FCMComposite_1" xmi:id="FCMComposite_1_3" 
      location="18,120" 
      inputDirectory="<c:get select = "$root/directory"/>"
      filenamePattern="<c:get select = "$root/filePattern"/>" 
      processedFileAction="moveToArchive" 
      replaceDuplicateArchives="true"
<c:if test="$root/useftp = 'true'">
	  fileFtp="true"
      fileFtpServer="<c:get select = "$root/ftpConfigurableSvc"/>"
</c:if> 

<%-- set ccsid and encoding if values differ from default --%>
<c:if test="$root/CCSID > 0">
messageCodedCharSetIdProperty="<c:get select = "$root/CCSID"/>"
</c:if>
<c:if test="$root/encoding> 0">
       messageEncodingProperty="<c:get select = "$root/encoding"/>"
</c:if>
<%-- determine values based on record detection and validation --%>
<c:choose>

<c:when test = "$root/recordDetect = 'fixedLength'">

      recordDetection="fixedLength" 
      recordLength= "<c:get select = "$root/recordLength"/>"    
      messageDomainProperty="BLOB"


</c:when>
<c:when test = "$root/recordDetect = 'delimited'">
      recordDetection="delimited" 
<%-- set delimiter if it is not null --%>
<c:if test="boolean($root/recordDelimiter)" >
<c:if test="string-length($root/recordDelimiter) > 0">
      recordDelimiter="customDelimiter" customDelimiter="<c:get select = "$root/recordDelimiter"/>"
</c:if> </c:if>    
      messageDomainProperty="BLOB"

</c:when>
<c:when test = "$root/recordDetect = 'xmlDelimited'">
      recordDetection="delimited"       
      messageDomainProperty="XMLNSC" 
<%-- set delimiter if it is not null --%>
<c:if test="boolean($root/recordDelimiter)" >
<c:if test="string-length($root/recordDelimiter) > 0">
      recordDelimiter="customDelimiter" customDelimiter="<c:get select = "$root/recordDelimiter"/>"
</c:if> </c:if> 

</c:when>
<c:when test = "$root/recordDetect = 'xmlParsed'">
      recordDetection="parsedRecordSequence"
      messageDomainProperty="XMLNSC" 

    messageSetProperty="<c:get select="substring-after(substring-after($root/messageSet,'/'),'/')"/>"
</c:when>
<c:when test = "$root/recordDetect = 'parsed'">
	  recordDetection="parsedRecordSequence"   
      messageDomainProperty="MRM"

      messageSetProperty="<c:get select="substring-after(substring-after($root/messageSet,'/'),'/')"/>"
	messageFormatProperty="<c:get select="$root/messageFormat"/>"
	messageTypeProperty="<c:get select="$root/messageType"/>"  
</c:when>
</c:choose>
>
        <translation xmi:type="utility:ConstantString" string="File Input"/>
      </nodes>
<c:if test="$root/loggingRequired = 'true'"> 
      <nodes xmi:type="<c:get select="$root/@brokerSchema1"/><c:get select = "$root/@log"/>.subflow:FCMComposite_1" 
      xmi:id="FCMComposite_1_1" location="372,124">
        <translation xmi:type="utility:ConstantString" string="Log"/>
      </nodes>
       <nodes xmi:type="ComIbmDatabase.msgnode:FCMComposite_1" xmi:id="FCMComposite_1_6" location="250,124" 
       statement="esql://routine/<c:get select="$root/@esqlQualifier"/>SaveUDPs.Main">
        <translation xmi:type="utility:ConstantString" string="Save UDP"/>
      </nodes>
</c:if>
      <connections xmi:type="eflow:FCMConnection" xmi:id="FCMConnection_4"
       targetNode="FCMComposite_1_100" sourceNode="FCMComposite_1_4" sourceTerminalName="OutTerminal.Output" targetTerminalName="InTerminal.Input"/>

      <connections xmi:type="eflow:FCMConnection" xmi:id="FCMConnection_3" 
      targetNode="FCMComposite_1_4" sourceNode="FCMComposite_1_3" sourceTerminalName="OutTerminal.out" targetTerminalName="InTerminal.Input"/>
<c:choose>
<c:when test="$root/errorMessageRequired = 'true'"> 
      <connections xmi:type="eflow:FCMConnection" xmi:id="FCMConnection_6" 
      targetNode="FCMComposite_1_5" sourceNode="FCMComposite_1_3" sourceTerminalName="OutTerminal.catch" targetTerminalName="InTerminal.in"/>
      <connections xmi:type="eflow:FCMConnection" xmi:id="FCMConnection_7" 
      targetNode="FCMComposite_1_8" sourceNode="FCMComposite_1_5" sourceTerminalName="OutTerminal.out" targetTerminalName="InTerminal.Input"/>
</c:when>
<c:otherwise>
      <connections xmi:type="eflow:FCMConnection" xmi:id="FCMConnection_1" targetNode="FCMComposite_1_8" sourceNode="FCMComposite_1_3" 
      sourceTerminalName="OutTerminal.catch" targetTerminalName="InTerminal.Input"/>
</c:otherwise>

</c:choose>

<c:if test="$root/loggingRequired = 'true'">
      <connections xmi:type="eflow:FCMConnection" xmi:id="FCMConnection_2" targetNode="FCMComposite_1_6" sourceNode="FCMComposite_1_3" sourceTerminalName="OutTerminal.EOD" targetTerminalName="InTerminal.in"/>
      <connections xmi:type="eflow:FCMConnection" xmi:id="FCMConnection_8" targetNode="FCMComposite_1_1" sourceNode="FCMComposite_1_6" sourceTerminalName="OutTerminal.out" targetTerminalName="InTerminal.Input"/>
</c:if>

<c:choose>
<%-- Specify routes --%>
<c:when test="$root/routing = 'specifyRoutes'">
   <connections xmi:type="eflow:FCMConnection" xmi:id="FCMConnection_1" targetNode="FCMComposite_1_15" sourceNode="FCMComposite_1_100" sourceTerminalName="OutTerminal.Output200" targetTerminalName="InTerminal.in"/>

<c:setVariable var="outputCount" select = "0"/>
<c:iterate select ="$root/routeTable/row" var = "curOutput">
<c:setVariable var="outputCount" select = "$outputCount+1"/> 
<connections xmi:type="eflow:FCMConnection" xmi:id="FCMConnection_10<c:get select="$outputCount"/>" 
      targetNode="FCMComposite_1_10<c:get select="$outputCount"/>" sourceNode="FCMComposite_1_100" 
      sourceTerminalName="OutTerminal.Output<c:get select="$outputCount"/>" 
      targetTerminalName="InTerminal.in"/>
</c:iterate>
    
</c:when>
<%-- destinationCache and no routing  - 1 node only + default for lookup--%>
<c:otherwise> 
<connections xmi:type="eflow:FCMConnection" xmi:id="FCMConnection_101" 
      targetNode="FCMComposite_1_101" 
      sourceNode="FCMComposite_1_100" 
      sourceTerminalName="OutTerminal.Output1" 
      targetTerminalName="InTerminal.in"/>
<c:if test = "$root/routing = 'lookupRoutes'">
   <connections xmi:type="eflow:FCMConnection" xmi:id="FCMConnection_1" 
   targetNode="FCMComposite_1_15" sourceNode="FCMComposite_1_100" 
   sourceTerminalName="OutTerminal.Output200" targetTerminalName="InTerminal.in"/>
   <c:if test="$root/cacheRefresh = 'true'">
      <connections xmi:type="eflow:FCMConnection" xmi:id="FCMConnection_11" targetNode="FCMComposite_1_53" 
      sourceNode="FCMComposite_1_54" sourceTerminalName="OutTerminal.failure" targetTerminalName="InTerminal.in"/>
   
      <connections xmi:type="eflow:FCMConnection" xmi:id="FCMConnection_11" targetNode="FCMComposite_1_53" 
      sourceNode="FCMComposite_1_54" sourceTerminalName="OutTerminal.out" targetTerminalName="InTerminal.in"/>
</c:if>
</c:if>
</c:otherwise>
     
</c:choose>
    </composition>
    <propertyOrganizer>
<c:if test="$root/loggingRequired = 'true'"> 
     <propertyDescriptor groupName="Group.Basic" configurable="true" userDefined="true" describedAttribute="Property.LoggingOn">
          <propertyName xmi:type="utility:TranslatableString" key="Property.LoggingOn" 
          bundleName="<c:get select="$root/@thisFlowBundleName"/>"
          pluginId="<c:get select="$root/@projectname"/>"/>
</c:if>
<c:if test="$root/errorMessageRequired = 'true'">
    <propertyDescriptor groupName="Group.Basic" configurable="true" userDefined="true" describedAttribute="Property.ErrorLoggingOn">
        <propertyName xmi:type="utility:TranslatableString" key="Property.ErrorLoggingOn" 
    		bundleName="<c:get select="$root/@thisFlowBundleName"/>" 
        pluginId="<c:get select="$root/@projectname"/>"/>
      </propertyDescriptor> 
</c:if>
<c:if test="$root/loggingRequired = 'true'"> 
      </propertyDescriptor>
</c:if>      
	</propertyOrganizer>
  </eClassifiers>
</ecore:EPackage>
